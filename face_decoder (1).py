# -*- coding: utf-8 -*-
"""Face-decoder.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QJ9dquHwNjyavZ0dtlMOtipYRpyyCf3y
"""

import sys
sys.path.append("..")

# Commented out IPython magic to ensure Python compatibility.
import tensorflow as tf
import keras, keras.layers as L, keras.backend as K
import numpy as np
from sklearn.model_selection import train_test_split
# %matplotlib inline
import matplotlib.pyplot as plt
import numpy as np

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/My Drive/

from keras.preprocessing import image

import cv2
import os
import matplotlib.pyplot as plt
import numpy as np

# Loading images to train the autoencoder

def load_images_from_folder(folder):
    images = []
    for filename in os.listdir(folder):
        img = cv2.imread(os.path.join(folder,filename))
        if img is not None:
            images.append(img)
    return images

folder="/content/drive/My Drive/all_pix"

CX = load_images_from_folder(folder)
CX = np.array(CX)
plt.axis("off")
plt.imshow(cv2.cvtColor(CX[60], cv2.COLOR_BGR2RGB))
plt.show()

IMG_SHAPE = CX.shape[1:]

# center images
CX = CX.astype('float32') / 255.0 - 0.5

plt.title('sample images')

for i in range(6):
    plt.subplot(2,3,i+1)
    show_image(CX[i])

print("CX shape:", CX.shape)

from sklearn.model_selection import train_test_split
CX_train, CX_test = train_test_split(CX, test_size=0.1, random_state=42)

def show_image(x):
    plt.imshow(np.clip(x + 0.5, 0, 1))

from keras.layers import Dense, Flatten, Reshape, Input, InputLayer
from keras.models import Sequential, Model

def build_autoencoder(img_shape, code_size):
    # The encoder
    encoder = Sequential()
    encoder.add(InputLayer(img_shape))
    encoder.add(Flatten())
    encoder.add(Dense(code_size))

    # The decoder
    decoder = Sequential()
    decoder.add(InputLayer((code_size,)))
    decoder.add(Dense(np.prod(img_shape))) 
    decoder.add(Reshape(img_shape))

    return encoder, decoder

encoder, decoder = build_autoencoder(IMG_SHAPE, code_size=32)

inp = L.Input(IMG_SHAPE)
code = encoder(inp)
reconstruction = decoder(code)

autoencoder = keras.models.Model(inputs=inp, outputs=reconstruction)
autoencoder.compile(optimizer='adamax', loss='mse')

history = autoencoder.fit(x=CX_train, y=CX_train, epochs=15,
                validation_data=[CX_test])

def visualize(img,encoder,decoder):
    """Draws original, encoded and decoded images"""
    # img[None] will have shape of (1, 32, 32, 3) which is the same as the model input
    code = encoder.predict(img[None])[0]
    reco = decoder.predict(code[None])[0]
    kernel = np.array([[-1,-1,-1], 
                   [-1, 9,-1],
                   [-1,-1,-1]])
    image_sharp = cv2.filter2D(reco, -1, kernel)

    plt.subplot(1,3,1)
    plt.title("Original")
    show_image(img)

    plt.subplot(1,3,2)
    plt.title("Code")
    plt.imshow(code.reshape([code.shape[-1]//2,-1]))

    plt.subplot(1,3,3)
    plt.title("Reconstructed")
    show_image(reco)
    plt.show()
    

for i in range(9):
    img = CX_test[i]
    visualize(img,encoder,decoder)